{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WHOOP Python Client","text":"<p>A comprehensive Python client for the WHOOP API that provides easy access to your fitness and recovery data.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Full API Coverage: Access all WHOOP API endpoints including cycles, sleep, recovery, workouts, and user data</li> <li>Type Safety: Built with Pydantic models for robust data validation and IDE support</li> <li>OAuth2 Authentication: Complete OAuth2 flow implementation with automatic token refresh</li> <li>Async Support: Fully asynchronous API using HTTPX for efficient concurrent requests</li> <li>Pagination Support: Automatic pagination handling for large datasets</li> <li>Error Handling: Comprehensive error handling with meaningful error messages</li> <li>Rate Limiting: Built-in awareness of API rate limits</li> <li>Documentation: Extensive documentation with examples and best practices</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install whoop-python-client\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def main():\n    # Initialize client\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"http://localhost:8000/callback\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get user profile\n    profile = await client.get_profile_basic()\n    print(f\"Hello, {profile.first_name}!\")\n\n    # Get recent cycles\n    cycles = await client.get_cycle_collection(limit=5)\n    for cycle in cycles.records:\n        if cycle.score:\n            print(f\"Cycle {cycle.id}: Strain {cycle.score.strain}\")\n\n    # Get sleep data\n    sleep_data = await client.get_sleep_collection(limit=3)\n    for sleep in sleep_data.records:\n        if sleep.score and not sleep.nap:\n            print(f\"Sleep efficiency: {sleep.score.sleep_efficiency_percentage}%\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"#api-coverage","title":"API Coverage","text":"<p>The client provides access to all WHOOP API v2 endpoints:</p>"},{"location":"#cycles","title":"Cycles","text":"<ul> <li>Get specific cycle by ID</li> <li>Get paginated cycle collection</li> <li>Get sleep data for a cycle</li> <li>Iterate through all cycles</li> </ul>"},{"location":"#sleep","title":"Sleep","text":"<ul> <li>Get specific sleep by ID</li> <li>Get paginated sleep collection</li> <li>Detailed sleep stage analysis</li> <li>Sleep performance metrics</li> </ul>"},{"location":"#recovery","title":"Recovery","text":"<ul> <li>Get recovery collection</li> <li>Get recovery for specific cycle</li> <li>HRV and recovery score data</li> <li>Skin temperature and SpO2 (4.0+ devices)</li> </ul>"},{"location":"#workouts","title":"Workouts","text":"<ul> <li>Get specific workout by ID</li> <li>Get paginated workout collection</li> <li>Heart rate zones and strain data</li> <li>Distance and altitude metrics</li> </ul>"},{"location":"#user","title":"User","text":"<ul> <li>Basic profile information</li> <li>Body measurements</li> <li>Height, weight, and max heart rate</li> </ul>"},{"location":"#data-models","title":"Data Models","text":"<p>All API responses are validated using Pydantic models:</p> <pre><code>from whoop_client.models import Cycle, Sleep, Recovery, WorkoutV2\n\n# Type-safe data access\ncycle: Cycle = await client.get_cycle_by_id(12345)\nprint(f\"Strain: {cycle.score.strain}\")  # IDE autocomplete supported\n\n# Validation ensures data integrity\nsleep: Sleep = await client.get_sleep_by_id(\"uuid-string\")\nprint(f\"Sleep stages: {sleep.score.stage_summary}\")\n</code></pre>"},{"location":"#authentication","title":"Authentication","text":"<p>The client handles OAuth2 authentication with automatic token refresh:</p> <pre><code>from whoop_client import WhoopClient\n\n# Initialize with OAuth2 credentials\nclient = WhoopClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    redirect_uri=\"http://localhost:8000/callback\",\n    scopes=[\"read:profile\", \"read:cycles\", \"read:sleep\"]\n)\n\n# Get authorization URL\nauth_url = client.auth.get_authorization_url()\nprint(f\"Visit: {auth_url}\")\n\n# Exchange authorization code for tokens\ntokens = await client.auth.exchange_code(\"authorization_code\")\n\n# Client automatically refreshes tokens when needed\nprofile = await client.get_profile_basic()\n</code></pre>"},{"location":"#pagination-made-easy","title":"Pagination Made Easy","text":"<p>Handle large datasets with automatic pagination:</p> <pre><code># Manual pagination\nresponse = await client.get_cycle_collection(limit=25)\nwhile response.next_token:\n    response = await client.get_cycle_collection(\n        limit=25, \n        next_token=response.next_token\n    )\n\n# Automatic pagination\nasync for cycle in client.iterate_cycles():\n    print(f\"Processing cycle {cycle.id}\")\n    if cycle.id &lt; 1000:  # Process first 1000 cycles\n        break\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling for robust applications:</p> <pre><code>import httpx\nfrom whoop_client import WhoopClient\n\ntry:\n    profile = await client.get_profile_basic()\nexcept httpx.HTTPStatusError as e:\n    if e.response.status_code == 401:\n        print(\"Authentication failed\")\n    elif e.response.status_code == 429:\n        print(\"Rate limit exceeded\")\n    else:\n        print(f\"HTTP error: {e.response.status_code}\")\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Complete setup guide and basic usage</li> <li>API Reference - Detailed method documentation</li> <li>Endpoints - Examples for each API endpoint</li> <li>Models - Data model documentation</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>WHOOP Developer Account</li> <li>OAuth2 Application configured in WHOOP Developer Portal</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache 2.0 License - see LICENSE file for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub Issues</li> <li>WHOOP Developer Documentation</li> <li>API Reference</li> </ul> <p>This client is not officially associated with WHOOP. WHOOP is a trademark of WHOOP, Inc.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with the WHOOP Python client.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>You can install the WHOOP Python client using pip:</p> <pre><code>pip install whoop-python-client\n</code></pre> <p>Or install from source:</p> <pre><code>git clone https://github.com/jxtngx/whoop-python-client.git\ncd whoop-python-client\npip install -e .\n</code></pre>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before using the WHOOP Python client, you'll need:</p> <ol> <li>WHOOP Developer Account: Sign up at WHOOP Developer Portal</li> <li>OAuth2 Application: Create an application to get your client ID and secret</li> <li>OAuth2 Scopes: Configure the required scopes for your application</li> </ol>"},{"location":"getting-started/#required-dependencies","title":"Required Dependencies","text":"<p>The client requires the following dependencies:</p> <ul> <li><code>httpx</code> - For HTTP requests</li> <li><code>pydantic</code> - For data validation and serialization</li> <li><code>python-dateutil</code> - For date/time handling (optional, for convenience)</li> </ul>"},{"location":"getting-started/#oauth2-setup","title":"OAuth2 Setup","text":""},{"location":"getting-started/#1-create-whoop-developer-application","title":"1. Create WHOOP Developer Application","text":"<ol> <li>Go to the WHOOP Developer Portal</li> <li>Create a new application</li> <li>Configure your redirect URI (e.g., <code>http://localhost:8000/callback</code>)</li> <li>Note down your <code>client_id</code> and <code>client_secret</code></li> </ol>"},{"location":"getting-started/#2-configure-oauth2-scopes","title":"2. Configure OAuth2 Scopes","text":"<p>The following scopes are available:</p> <ul> <li><code>read:profile</code> - Read user profile information</li> <li><code>read:body_measurement</code> - Read body measurements (height, weight, max HR)</li> <li><code>read:cycles</code> - Read physiological cycle data</li> <li><code>read:sleep</code> - Read sleep activity data</li> <li><code>read:recovery</code> - Read recovery data</li> <li><code>read:workout</code> - Read workout data</li> </ul>"},{"location":"getting-started/#3-authentication-flow","title":"3. Authentication Flow","text":"<p>The WHOOP API uses OAuth2 Authorization Code flow:</p> <pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def oauth_flow():\n    # Initialize client\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"http://localhost:8000/callback\",\n        scopes=[\"read:profile\", \"read:sleep\", \"read:cycles\"]\n    )\n\n    # Step 1: Get authorization URL\n    auth_url = client.auth.get_authorization_url(state=\"random_state\")\n    print(f\"Go to: {auth_url}\")\n\n    # Step 2: User authorizes and you get the code from redirect\n    authorization_code = input(\"Enter the authorization code: \")\n\n    # Step 3: Exchange code for tokens\n    tokens = await client.auth.exchange_code(authorization_code)\n\n    print(f\"Access token: {tokens.access_token}\")\n    print(f\"Refresh token: {tokens.refresh_token}\")\n\n    # Now you can use the client\n    profile = await client.get_profile_basic()\n    print(f\"Hello, {profile.first_name}!\")\n\nasyncio.run(oauth_flow())\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#initialize-the-client","title":"Initialize the Client","text":"<pre><code>from whoop_client import WhoopClient\n\n# With existing tokens\nclient = WhoopClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    redirect_uri=\"http://localhost:8000/callback\",\n    access_token=\"your_access_token\",\n    refresh_token=\"your_refresh_token\"\n)\n</code></pre>"},{"location":"getting-started/#get-user-information","title":"Get User Information","text":"<pre><code>import asyncio\n\nasync def get_user_info():\n    # Get basic profile\n    profile = await client.get_profile_basic()\n    print(f\"User: {profile.first_name} {profile.last_name}\")\n\n    # Get body measurements\n    measurements = await client.get_body_measurement()\n    print(f\"Height: {measurements.height_meter}m\")\n    print(f\"Weight: {measurements.weight_kilogram}kg\")\n\nasyncio.run(get_user_info())\n</code></pre>"},{"location":"getting-started/#get-recent-data","title":"Get Recent Data","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\n\nasync def get_recent_data():\n    # Get cycles from the last 7 days\n    start_date = datetime.now() - timedelta(days=7)\n\n    cycles = await client.get_cycle_collection(\n        limit=10,\n        start=start_date\n    )\n\n    for cycle in cycles.records:\n        print(f\"Cycle {cycle.id}: Strain {cycle.score.strain if cycle.score else 'N/A'}\")\n\n    # Get recent sleep\n    sleep_data = await client.get_sleep_collection(limit=5)\n\n    for sleep in sleep_data.records:\n        if sleep.score and not sleep.nap:\n            print(f\"Sleep: {sleep.score.sleep_efficiency_percentage}% efficiency\")\n\nasyncio.run(get_recent_data())\n</code></pre>"},{"location":"getting-started/#iterate-through-all-data","title":"Iterate Through All Data","text":"<pre><code>import asyncio\n\nasync def iterate_all_data():\n    # Iterate through all cycles (handles pagination automatically)\n    cycle_count = 0\n    async for cycle in client.iterate_cycles():\n        cycle_count += 1\n        if cycle_count &gt;= 100:  # Limit to first 100\n            break\n\n    print(f\"Processed {cycle_count} cycles\")\n\n    # Iterate through recent sleep data\n    sleep_count = 0\n    async for sleep in client.iterate_sleeps():\n        if not sleep.nap:  # Only count actual sleep, not naps\n            sleep_count += 1\n        if sleep_count &gt;= 30:  # Last 30 sleep sessions\n            break\n\n    print(f\"Processed {sleep_count} sleep sessions\")\n\nasyncio.run(iterate_all_data())\n</code></pre>"},{"location":"getting-started/#error-handling","title":"Error Handling","text":"<p>Always implement proper error handling:</p> <pre><code>import asyncio\nimport httpx\n\nasync def error_handling_example():\n    try:\n        profile = await client.get_profile_basic()\n        print(f\"User: {profile.first_name}\")\n\n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 401:\n            print(\"Authentication failed - check your tokens\")\n        elif e.response.status_code == 403:\n            print(\"Insufficient permissions - check your scopes\")\n        elif e.response.status_code == 429:\n            print(\"Rate limit exceeded - wait and retry\")\n        else:\n            print(f\"HTTP error: {e.response.status_code}\")\n\n    except ValueError as e:\n        print(f\"Client configuration error: {e}\")\n\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n\nasyncio.run(error_handling_example())\n</code></pre>"},{"location":"getting-started/#token-management","title":"Token Management","text":""},{"location":"getting-started/#storing-tokens-securely","title":"Storing Tokens Securely","text":"<pre><code>import os\nimport json\nfrom pathlib import Path\n\ndef save_tokens(access_token, refresh_token):\n    \"\"\"Save tokens to a secure location.\"\"\"\n    tokens = {\n        \"access_token\": access_token,\n        \"refresh_token\": refresh_token\n    }\n\n    # Save to user's home directory\n    token_file = Path.home() / \".whoop_tokens.json\"\n\n    with open(token_file, 'w') as f:\n        json.dump(tokens, f)\n\n    # Make file readable only by owner\n    token_file.chmod(0o600)\n\ndef load_tokens():\n    \"\"\"Load tokens from storage.\"\"\"\n    token_file = Path.home() / \".whoop_tokens.json\"\n\n    if token_file.exists():\n        with open(token_file, 'r') as f:\n            return json.load(f)\n\n    return None\n\n# Usage\ntokens = load_tokens()\nif tokens:\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"http://localhost:8000/callback\",\n        access_token=tokens[\"access_token\"],\n        refresh_token=tokens[\"refresh_token\"]\n    )\n</code></pre>"},{"location":"getting-started/#automatic-token-refresh","title":"Automatic Token Refresh","text":"<p>The client automatically handles token refresh:</p> <pre><code>import asyncio\n\nasync def auto_refresh_example():\n    # Client will automatically refresh tokens when needed\n    profile = await client.get_profile_basic()\n\n    # Get updated tokens after refresh\n    if client.auth.access_token:\n        save_tokens(client.auth.access_token, client.auth.refresh_token)\n\nasyncio.run(auto_refresh_example())\n</code></pre>"},{"location":"getting-started/#rate-limiting","title":"Rate Limiting","text":"<p>WHOOP API has rate limits. The client doesn't automatically retry, so implement your own retry logic:</p> <pre><code>import asyncio\nimport httpx\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\n@retry(\n    stop=stop_after_attempt(3),\n    wait=wait_exponential(multiplier=1, min=4, max=10)\n)\nasync def get_data_with_retry():\n    try:\n        return await client.get_profile_basic()\n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 429:\n            print(\"Rate limited, retrying...\")\n            raise\n        else:\n            print(f\"HTTP error: {e.response.status_code}\")\n            raise\n\n# Usage\ntry:\n    profile = await get_data_with_retry()\n    print(f\"User: {profile.first_name}\")\nexcept Exception as e:\n    print(f\"Failed after retries: {e}\")\n</code></pre>"},{"location":"getting-started/#best-practices","title":"Best Practices","text":"<ol> <li>Use Environment Variables: Store sensitive information in environment variables</li> <li>Implement Retry Logic: Handle rate limiting and temporary failures</li> <li>Cache Data: Don't make unnecessary API calls</li> <li>Use Pagination: Don't fetch all data at once for large datasets</li> <li>Handle Timezones: Be aware of timezone offsets in the data</li> <li>Respect Rate Limits: Implement appropriate delays between requests</li> </ol>"},{"location":"getting-started/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/#daily-summary-dashboard","title":"Daily Summary Dashboard","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\n\nasync def daily_summary():\n    today = datetime.now().date()\n\n    # Get today's cycle\n    cycles = await client.get_cycle_collection(\n        start=datetime.combine(today, datetime.min.time()),\n        limit=1\n    )\n\n    if cycles.records:\n        cycle = cycles.records[0]\n        print(f\"Today's Strain: {cycle.score.strain if cycle.score else 'N/A'}\")\n\n    # Get last night's sleep\n    sleep_data = await client.get_sleep_collection(limit=5)\n    last_sleep = next((s for s in sleep_data.records if not s.nap), None)\n\n    if last_sleep and last_sleep.score:\n        print(f\"Last Sleep Efficiency: {last_sleep.score.sleep_efficiency_percentage}%\")\n\n    # Get latest recovery\n    recovery_data = await client.get_recovery_collection(limit=1)\n    if recovery_data.records and recovery_data.records[0].score:\n        recovery = recovery_data.records[0]\n        print(f\"Recovery Score: {recovery.score.recovery_score}%\")\n\nasyncio.run(daily_summary())\n</code></pre>"},{"location":"getting-started/#weekly-trend-analysis","title":"Weekly Trend Analysis","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\n\nasync def weekly_trends():\n    week_ago = datetime.now() - timedelta(days=7)\n\n    # Collect all data for the week\n    cycles = []\n    async for cycle in client.iterate_cycles(start=week_ago):\n        cycles.append(cycle)\n\n    # Calculate averages\n    strains = [c.score.strain for c in cycles if c.score]\n    avg_strain = sum(strains) / len(strains) if strains else 0\n\n    print(f\"Average Strain this week: {avg_strain:.1f}\")\n    print(f\"Total cycles: {len(cycles)}\")\n\nasyncio.run(weekly_trends())\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for detailed method documentation</li> <li>Check out the Examples for more complex use cases</li> <li>Review the Models documentation for data structure details</li> </ul>"},{"location":"getting-started/#support","title":"Support","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting guide</li> <li>Review the WHOOP API Documentation</li> <li>File an issue on GitHub</li> </ol>"},{"location":"reference/auth/","title":"Authentication Reference","text":"<p>This page contains the authentication-related classes and methods.</p>"},{"location":"reference/auth/#oauth2handler","title":"OAuth2Handler","text":""},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler","title":"OAuth2Handler","text":"<pre><code>OAuth2Handler(\n    client_id: str,\n    client_secret: str,\n    redirect_uri: str,\n    scopes: Optional[List[str]] = None,\n)\n</code></pre> <p>Handles OAuth2 authentication flow for WHOOP API.</p> <p>This class manages the OAuth2 authorization code flow, token storage, and automatic token refresh.</p> <p>Attributes:</p> Name Type Description <code>client_id</code> <p>OAuth2 client ID from WHOOP.</p> <code>client_secret</code> <p>OAuth2 client secret from WHOOP.</p> <code>redirect_uri</code> <p>Redirect URI configured in WHOOP app settings.</p> <code>auth_base_url</code> <p>Base URL for OAuth2 authorization.</p> <code>token_url</code> <p>URL for token exchange.</p> <code>scopes</code> <p>List of requested OAuth2 scopes.</p> <p>Initialize OAuth2 handler.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>OAuth2 client ID from WHOOP.</p> required <code>client_secret</code> <code>str</code> <p>OAuth2 client secret from WHOOP.</p> required <code>redirect_uri</code> <code>str</code> <p>Redirect URI configured in WHOOP app settings.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request. Defaults to all available scopes.</p> <code>None</code>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler-attributes","title":"Attributes","text":""},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.access_token","title":"access_token  <code>property</code>","text":"<pre><code>access_token: Optional[str]\n</code></pre> <p>Get the current access token if available.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The access token or None if not available.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.refresh_token","title":"refresh_token  <code>property</code>","text":"<pre><code>refresh_token: Optional[str]\n</code></pre> <p>Get the current refresh token if available.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The refresh token or None if not available.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler-functions","title":"Functions","text":""},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.get_authorization_url","title":"get_authorization_url","text":"<pre><code>get_authorization_url(state: Optional[str] = None) -&gt; str\n</code></pre> <p>Generate the authorization URL for user consent.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Optional[str]</code> <p>Optional state parameter for CSRF protection.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL to redirect the user to.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.exchange_code","title":"exchange_code  <code>async</code>","text":"<pre><code>exchange_code(code: str) -&gt; TokenResponse\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code from the redirect.</p> required <p>Returns:</p> Type Description <code>TokenResponse</code> <p>Token response containing access token and refresh token.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the token exchange fails.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.refresh_access_token","title":"refresh_access_token  <code>async</code>","text":"<pre><code>refresh_access_token(refresh_token: str) -&gt; TokenResponse\n</code></pre> <p>Refresh the access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>TokenResponse</code> <p>New token response with refreshed access token.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the token refresh fails.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.is_token_expired","title":"is_token_expired","text":"<pre><code>is_token_expired() -&gt; bool\n</code></pre> <p>Check if the current access token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if token is expired or not available, False otherwise.</p>"},{"location":"reference/auth/#whoop_client.auth.OAuth2Handler.set_tokens","title":"set_tokens","text":"<pre><code>set_tokens(\n    access_token: str,\n    refresh_token: str,\n    expires_in: int = 3600,\n) -&gt; None\n</code></pre> <p>Manually set tokens (useful for restoring from storage).</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>The access token.</p> required <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <code>expires_in</code> <code>int</code> <p>Seconds until token expires (default 1 hour).</p> <code>3600</code>"},{"location":"reference/auth/#tokenresponse","title":"TokenResponse","text":""},{"location":"reference/auth/#whoop_client.auth.TokenResponse","title":"TokenResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>OAuth2 token response from WHOOP.</p> <p>Attributes:</p> Name Type Description <code>access_token</code> <code>str</code> <p>The access token for API requests.</p> <code>token_type</code> <code>str</code> <p>The type of token (typically \"bearer\").</p> <code>expires_in</code> <code>int</code> <p>Number of seconds until the token expires.</p> <code>refresh_token</code> <code>Optional[str]</code> <p>Token used to refresh the access token.</p> <code>scope</code> <code>Optional[str]</code> <p>Space-separated list of granted scopes.</p>"},{"location":"reference/cycle/","title":"Cycle Methods","text":"<p>The cycle methods provide access to physiological cycle data, which represents periods of activity and strain in a user's day.</p>"},{"location":"reference/cycle/#overview","title":"Overview","text":"<p>WHOOP tracks physiological cycles that typically run from when you wake up until you go to sleep. Each cycle contains strain data, heart rate metrics, and energy expenditure information.</p>"},{"location":"reference/cycle/#methods","title":"Methods","text":""},{"location":"reference/cycle/#whoop_client.client.WhoopClient.get_cycle_by_id","title":"get_cycle_by_id  <code>async</code>","text":"<pre><code>get_cycle_by_id(cycle_id: int) -&gt; Cycle\n</code></pre> <p>Get a specific cycle by ID.</p> <p>Parameters:</p> Name Type Description Default <code>cycle_id</code> <code>int</code> <p>ID of the cycle to retrieve.</p> required <p>Returns:</p> Type Description <code>Cycle</code> <p>The requested cycle.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/cycle/#whoop_client.client.WhoopClient.get_cycle_collection","title":"get_cycle_collection  <code>async</code>","text":"<pre><code>get_cycle_collection(\n    limit: int = 10,\n    start: Optional[datetime] = None,\n    end: Optional[datetime] = None,\n    next_token: Optional[str] = None,\n) -&gt; PaginatedCycleResponse\n</code></pre> <p>Get all physiological cycles for a user, paginated.</p> <p>Results are sorted by start time in descending order.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Maximum number of cycles to return (max 25, default 10).</p> <code>10</code> <code>start</code> <code>Optional[datetime]</code> <p>Return cycles that occurred after or during this time.</p> <code>None</code> <code>end</code> <code>Optional[datetime]</code> <p>Return cycles that ended before this time (default: now).</p> <code>None</code> <code>next_token</code> <code>Optional[str]</code> <p>Token from previous response to get next page.</p> <code>None</code> <p>Returns:</p> Type Description <code>PaginatedCycleResponse</code> <p>Paginated response containing cycles.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/cycle/#whoop_client.client.WhoopClient.get_sleep_for_cycle","title":"get_sleep_for_cycle  <code>async</code>","text":"<pre><code>get_sleep_for_cycle(cycle_id: int) -&gt; Sleep\n</code></pre> <p>Get the sleep for a specific cycle.</p> <p>Parameters:</p> Name Type Description Default <code>cycle_id</code> <code>int</code> <p>ID of the cycle to retrieve sleep for.</p> required <p>Returns:</p> Type Description <code>Sleep</code> <p>The sleep activity for the cycle.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/cycle/#whoop_client.client.WhoopClient.iterate_cycles","title":"iterate_cycles  <code>async</code>","text":"<pre><code>iterate_cycles(\n    start: Optional[datetime] = None,\n    end: Optional[datetime] = None,\n    page_size: int = 25,\n) -&gt; AsyncIterator[Cycle]\n</code></pre> <p>Iterate through all cycles with automatic pagination.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Optional[datetime]</code> <p>Return cycles that occurred after or during this time.</p> <code>None</code> <code>end</code> <code>Optional[datetime]</code> <p>Return cycles that ended before this time.</p> <code>None</code> <code>page_size</code> <code>int</code> <p>Number of items per page (max 25).</p> <code>25</code> <p>Yields:</p> Type Description <code>AsyncIterator[Cycle]</code> <p>Individual cycle objects.</p>"},{"location":"reference/cycle/#models","title":"Models","text":""},{"location":"reference/cycle/#whoop_client.models.cycle.Cycle","title":"Cycle","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a physiological cycle in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the physiological cycle.</p> <code>user_id</code> <code>int</code> <p>The WHOOP User ID for the physiological cycle.</p> <code>created_at</code> <code>datetime</code> <p>When the cycle was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the cycle was last updated in WHOOP.</p> <code>start</code> <code>datetime</code> <p>Start time of the cycle.</p> <code>end</code> <code>Optional[datetime]</code> <p>End time of the cycle. If not present, the user is currently in this cycle.</p> <code>timezone_offset</code> <code>str</code> <p>User's timezone offset when the cycle was recorded (format: \u00b1hh:mm or Z).</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this cycle.</p> <code>score</code> <code>Optional[CycleScore]</code> <p>Measurements and evaluation of the cycle. Only present if score_state is SCORED.</p>"},{"location":"reference/cycle/#whoop_client.models.cycle.CycleScore","title":"CycleScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of a physiological cycle.</p> <p>Attributes:</p> Name Type Description <code>strain</code> <code>float</code> <p>Cardiovascular load (0-21 scale) based on heart rate during the cycle.</p> <code>kilojoule</code> <code>float</code> <p>Energy expended during the cycle in kilojoules.</p> <code>average_heart_rate</code> <code>int</code> <p>Average heart rate in beats per minute during the cycle.</p> <code>max_heart_rate</code> <code>int</code> <p>Maximum heart rate in beats per minute during the cycle.</p>"},{"location":"reference/cycle/#whoop_client.models.cycle.PaginatedCycleResponse","title":"PaginatedCycleResponse","text":"<p>               Bases: <code>PaginatedResponse</code></p> <p>Paginated response containing physiological cycles.</p> <p>Attributes:</p> Name Type Description <code>records</code> <code>List[Cycle]</code> <p>List of cycles in this page.</p> <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records.</p>"},{"location":"reference/cycle/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/cycle/#getting-a-specific-cycle","title":"Getting a Specific Cycle","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_cycle_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get a specific cycle by ID\n    cycle = await client.get_cycle_by_id(93845)\n\n    print(f\"Cycle ID: {cycle.id}\")\n    print(f\"Start: {cycle.start}\")\n    print(f\"End: {cycle.end}\")\n\n    if cycle.score:\n        print(f\"Strain: {cycle.score.strain}\")\n        print(f\"Average HR: {cycle.score.average_heart_rate}\")\n        print(f\"Kilojoules: {cycle.score.kilojoule}\")\n\nasyncio.run(get_cycle_example())\n</code></pre>"},{"location":"reference/cycle/#getting-multiple-cycles","title":"Getting Multiple Cycles","text":"<pre><code>import asyncio\nfrom datetime import datetime\nfrom whoop_client import WhoopClient\n\nasync def get_cycles_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get cycles from the last 7 days\n    start_date = datetime.now() - timedelta(days=7)\n\n    response = await client.get_cycle_collection(\n        limit=10,\n        start=start_date\n    )\n\n    for cycle in response.records:\n        print(f\"Cycle {cycle.id}: {cycle.start} - {cycle.end}\")\n        if cycle.score:\n            print(f\"  Strain: {cycle.score.strain}\")\n\n    # Check if there are more pages\n    if response.next_token:\n        print(\"More cycles available...\")\n\nasyncio.run(get_cycles_example())\n</code></pre>"},{"location":"reference/cycle/#iterating-through-all-cycles","title":"Iterating Through All Cycles","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def iterate_cycles_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Iterate through all cycles (handles pagination automatically)\n    async for cycle in client.iterate_cycles(page_size=25):\n        print(f\"Processing cycle {cycle.id}\")\n        if cycle.score:\n            print(f\"  Strain: {cycle.score.strain}\")\n\n        # Process only the first 100 cycles\n        if cycle.id &lt;= 100:\n            break\n\nasyncio.run(iterate_cycles_example())\n</code></pre>"},{"location":"reference/cycle/#getting-sleep-for-a-cycle","title":"Getting Sleep for a Cycle","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_cycle_sleep_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get sleep data for a specific cycle\n    sleep = await client.get_sleep_for_cycle(93845)\n\n    print(f\"Sleep ID: {sleep.id}\")\n    print(f\"Start: {sleep.start}\")\n    print(f\"End: {sleep.end}\")\n    print(f\"Is nap: {sleep.nap}\")\n\n    if sleep.score:\n        print(f\"Sleep efficiency: {sleep.score.sleep_efficiency_percentage}%\")\n        print(f\"Sleep cycles: {sleep.score.stage_summary.sleep_cycle_count}\")\n\nasyncio.run(get_cycle_sleep_example())\n</code></pre>"},{"location":"reference/cycle/#rate-limiting","title":"Rate Limiting","text":"<p>The cycle methods are subject to WHOOP's rate limiting. The client will automatically handle token refresh, but you should implement appropriate retry logic with exponential backoff for rate limit errors.</p>"},{"location":"reference/cycle/#error-handling","title":"Error Handling","text":"<pre><code>import asyncio\nimport httpx\nfrom whoop_client import WhoopClient\n\nasync def error_handling_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    try:\n        cycle = await client.get_cycle_by_id(999999)\n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 404:\n            print(\"Cycle not found\")\n        elif e.response.status_code == 401:\n            print(\"Authentication failed\")\n        elif e.response.status_code == 429:\n            print(\"Rate limit exceeded\")\n        else:\n            print(f\"HTTP error: {e.response.status_code}\")\n    except ValueError as e:\n        print(f\"Client error: {e}\")\n\nasyncio.run(error_handling_example())\n</code></pre>"},{"location":"reference/models/","title":"Models Reference","text":"<p>This page contains all the data models used by the WHOOP Python client.</p>"},{"location":"reference/models/#common-models","title":"Common Models","text":""},{"location":"reference/models/#scorestate","title":"ScoreState","text":""},{"location":"reference/models/#whoop_client.models.common.ScoreState","title":"ScoreState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>State of score calculation.</p> <p>Attributes:</p> Name Type Description <code>SCORED</code> <p>The activity was scored and measurement values are present.</p> <code>PENDING_SCORE</code> <p>WHOOP is currently evaluating the activity.</p> <code>UNSCORABLE</code> <p>The activity could not be scored, commonly due to insufficient metric data.</p>"},{"location":"reference/models/#paginatedresponse","title":"PaginatedResponse","text":""},{"location":"reference/models/#whoop_client.models.common.PaginatedResponse","title":"PaginatedResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model for paginated API responses.</p> <p>Attributes:</p> Name Type Description <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records. If not present, no more records exist.</p>"},{"location":"reference/models/#cycle-models","title":"Cycle Models","text":""},{"location":"reference/models/#cycle","title":"Cycle","text":""},{"location":"reference/models/#whoop_client.models.cycle.Cycle","title":"Cycle","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a physiological cycle in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the physiological cycle.</p> <code>user_id</code> <code>int</code> <p>The WHOOP User ID for the physiological cycle.</p> <code>created_at</code> <code>datetime</code> <p>When the cycle was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the cycle was last updated in WHOOP.</p> <code>start</code> <code>datetime</code> <p>Start time of the cycle.</p> <code>end</code> <code>Optional[datetime]</code> <p>End time of the cycle. If not present, the user is currently in this cycle.</p> <code>timezone_offset</code> <code>str</code> <p>User's timezone offset when the cycle was recorded (format: \u00b1hh:mm or Z).</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this cycle.</p> <code>score</code> <code>Optional[CycleScore]</code> <p>Measurements and evaluation of the cycle. Only present if score_state is SCORED.</p>"},{"location":"reference/models/#cyclescore","title":"CycleScore","text":""},{"location":"reference/models/#whoop_client.models.cycle.CycleScore","title":"CycleScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of a physiological cycle.</p> <p>Attributes:</p> Name Type Description <code>strain</code> <code>float</code> <p>Cardiovascular load (0-21 scale) based on heart rate during the cycle.</p> <code>kilojoule</code> <code>float</code> <p>Energy expended during the cycle in kilojoules.</p> <code>average_heart_rate</code> <code>int</code> <p>Average heart rate in beats per minute during the cycle.</p> <code>max_heart_rate</code> <code>int</code> <p>Maximum heart rate in beats per minute during the cycle.</p>"},{"location":"reference/models/#paginatedcycleresponse","title":"PaginatedCycleResponse","text":""},{"location":"reference/models/#whoop_client.models.cycle.PaginatedCycleResponse","title":"PaginatedCycleResponse","text":"<p>               Bases: <code>PaginatedResponse</code></p> <p>Paginated response containing physiological cycles.</p> <p>Attributes:</p> Name Type Description <code>records</code> <code>List[Cycle]</code> <p>List of cycles in this page.</p> <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records.</p>"},{"location":"reference/models/#sleep-models","title":"Sleep Models","text":""},{"location":"reference/models/#sleep","title":"Sleep","text":""},{"location":"reference/models/#whoop_client.models.sleep.Sleep","title":"Sleep","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a sleep activity in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Unique identifier for the sleep activity.</p> <code>v1_id</code> <code>Optional[int]</code> <p>Previous generation identifier (deprecated after 09/01/2025).</p> <code>user_id</code> <code>int</code> <p>The WHOOP User who performed the sleep activity.</p> <code>created_at</code> <code>datetime</code> <p>When the sleep activity was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the sleep activity was last updated in WHOOP.</p> <code>start</code> <code>datetime</code> <p>Start time of the sleep.</p> <code>end</code> <code>datetime</code> <p>End time of the sleep.</p> <code>timezone_offset</code> <code>str</code> <p>User's timezone offset when the sleep was recorded (format: \u00b1hh:mm or Z).</p> <code>nap</code> <code>bool</code> <p>Whether this sleep activity was a nap.</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this sleep.</p> <code>score</code> <code>Optional[SleepScore]</code> <p>Measurements and evaluation of the sleep. Only present if score_state is SCORED.</p>"},{"location":"reference/models/#sleepscore","title":"SleepScore","text":""},{"location":"reference/models/#whoop_client.models.sleep.SleepScore","title":"SleepScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of a sleep activity.</p> <p>Attributes:</p> Name Type Description <code>stage_summary</code> <code>SleepStageSummary</code> <p>Summary of time spent in each sleep stage.</p> <code>sleep_needed</code> <code>SleepNeeded</code> <p>Breakdown of sleep need calculation.</p> <code>respiratory_rate</code> <code>Optional[float]</code> <p>Respiratory rate during sleep in breaths per minute.</p> <code>sleep_performance_percentage</code> <code>Optional[float]</code> <p>Percentage of sleep achieved vs sleep needed (0-100%).</p> <code>sleep_consistency_percentage</code> <code>Optional[float]</code> <p>Sleep/wake time consistency vs previous day (0-100%).</p> <code>sleep_efficiency_percentage</code> <code>Optional[float]</code> <p>Percentage of time in bed actually sleeping (0-100%).</p>"},{"location":"reference/models/#sleepstagesummary","title":"SleepStageSummary","text":""},{"location":"reference/models/#whoop_client.models.sleep.SleepStageSummary","title":"SleepStageSummary","text":"<p>               Bases: <code>BaseModel</code></p> <p>Summary of sleep stages during a sleep activity.</p> <p>Attributes:</p> Name Type Description <code>total_in_bed_time_milli</code> <code>int</code> <p>Total time spent in bed in milliseconds.</p> <code>total_awake_time_milli</code> <code>int</code> <p>Total time spent awake in milliseconds.</p> <code>total_no_data_time_milli</code> <code>int</code> <p>Total time with no data received in milliseconds.</p> <code>total_light_sleep_time_milli</code> <code>int</code> <p>Total time in light sleep in milliseconds.</p> <code>total_slow_wave_sleep_time_milli</code> <code>int</code> <p>Total time in Slow Wave Sleep (SWS) in milliseconds.</p> <code>total_rem_sleep_time_milli</code> <code>int</code> <p>Total time in Rapid Eye Movement (REM) sleep in milliseconds.</p> <code>sleep_cycle_count</code> <code>int</code> <p>Number of sleep cycles during the sleep.</p> <code>disturbance_count</code> <code>int</code> <p>Number of times the user was disturbed during sleep.</p>"},{"location":"reference/models/#sleepneeded","title":"SleepNeeded","text":""},{"location":"reference/models/#whoop_client.models.sleep.SleepNeeded","title":"SleepNeeded","text":"<p>               Bases: <code>BaseModel</code></p> <p>Breakdown of sleep need calculation.</p> <p>Attributes:</p> Name Type Description <code>baseline_milli</code> <code>int</code> <p>Sleep needed based on historical trends in milliseconds.</p> <code>need_from_sleep_debt_milli</code> <code>int</code> <p>Additional sleep needed due to sleep debt in milliseconds.</p> <code>need_from_recent_strain_milli</code> <code>int</code> <p>Additional sleep needed due to recent strain in milliseconds.</p> <code>need_from_recent_nap_milli</code> <code>int</code> <p>Reduction in sleep need from recent naps (negative or zero) in milliseconds.</p>"},{"location":"reference/models/#paginatedsleepresponse","title":"PaginatedSleepResponse","text":""},{"location":"reference/models/#whoop_client.models.sleep.PaginatedSleepResponse","title":"PaginatedSleepResponse","text":"<p>               Bases: <code>PaginatedResponse</code></p> <p>Paginated response containing sleep activities.</p> <p>Attributes:</p> Name Type Description <code>records</code> <code>List[Sleep]</code> <p>List of sleep activities in this page.</p> <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records.</p>"},{"location":"reference/models/#recovery-models","title":"Recovery Models","text":""},{"location":"reference/models/#recovery","title":"Recovery","text":""},{"location":"reference/models/#whoop_client.models.recovery.Recovery","title":"Recovery","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a recovery measurement in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>cycle_id</code> <code>int</code> <p>The physiological cycle ID this recovery is associated with.</p> <code>sleep_id</code> <code>UUID</code> <p>ID of the Sleep associated with the Recovery.</p> <code>user_id</code> <code>int</code> <p>The WHOOP User for the recovery.</p> <code>created_at</code> <code>datetime</code> <p>When the recovery was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the recovery was last updated in WHOOP.</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this recovery.</p> <code>score</code> <code>Optional[RecoveryScore]</code> <p>Measurements and evaluation of the recovery. Only present if score_state is SCORED.</p>"},{"location":"reference/models/#recoveryscore","title":"RecoveryScore","text":""},{"location":"reference/models/#whoop_client.models.recovery.RecoveryScore","title":"RecoveryScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of recovery.</p> <p>Attributes:</p> Name Type Description <code>user_calibrating</code> <code>bool</code> <p>True if user is still calibrating and not enough data is available.</p> <code>recovery_score</code> <code>float</code> <p>Percentage (0-100%) reflecting body's readiness for strain.</p> <code>resting_heart_rate</code> <code>float</code> <p>User's resting heart rate in beats per minute.</p> <code>hrv_rmssd_milli</code> <code>float</code> <p>Heart Rate Variability (RMSSD) in milliseconds.</p> <code>spo2_percentage</code> <code>Optional[float]</code> <p>Blood oxygen percentage (only for 4.0+ devices).</p> <code>skin_temp_celsius</code> <code>Optional[float]</code> <p>Skin temperature in Celsius (only for 4.0+ devices).</p>"},{"location":"reference/models/#recoverycollection","title":"RecoveryCollection","text":""},{"location":"reference/models/#whoop_client.models.recovery.RecoveryCollection","title":"RecoveryCollection","text":"<p>               Bases: <code>PaginatedResponse</code></p> <p>Paginated response containing recovery activities.</p> <p>Attributes:</p> Name Type Description <code>records</code> <code>List[Recovery]</code> <p>List of recovery activities in this page.</p> <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records.</p>"},{"location":"reference/models/#user-models","title":"User Models","text":""},{"location":"reference/models/#userbasicprofile","title":"UserBasicProfile","text":""},{"location":"reference/models/#whoop_client.models.user.UserBasicProfile","title":"UserBasicProfile","text":"<p>               Bases: <code>BaseModel</code></p> <p>Basic profile information for a WHOOP user.</p> <p>Attributes:</p> Name Type Description <code>user_id</code> <code>int</code> <p>The WHOOP User ID.</p> <code>email</code> <code>EmailStr</code> <p>User's email address.</p> <code>first_name</code> <code>str</code> <p>User's first name.</p> <code>last_name</code> <code>str</code> <p>User's last name.</p>"},{"location":"reference/models/#userbodymeasurement","title":"UserBodyMeasurement","text":""},{"location":"reference/models/#whoop_client.models.user.UserBodyMeasurement","title":"UserBodyMeasurement","text":"<p>               Bases: <code>BaseModel</code></p> <p>Body measurements for a WHOOP user.</p> <p>Attributes:</p> Name Type Description <code>height_meter</code> <code>float</code> <p>User's height in meters.</p> <code>weight_kilogram</code> <code>float</code> <p>User's weight in kilograms.</p> <code>max_heart_rate</code> <code>int</code> <p>WHOOP-calculated maximum heart rate for the user.</p>"},{"location":"reference/models/#workout-models","title":"Workout Models","text":""},{"location":"reference/models/#workoutv2","title":"WorkoutV2","text":""},{"location":"reference/models/#whoop_client.models.workout.WorkoutV2","title":"WorkoutV2","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a workout activity in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Unique identifier for the workout activity.</p> <code>v1_id</code> <code>Optional[int]</code> <p>Previous generation identifier (deprecated after 09/01/2025).</p> <code>user_id</code> <code>int</code> <p>The WHOOP User who performed the workout.</p> <code>created_at</code> <code>datetime</code> <p>When the workout activity was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the workout activity was last updated in WHOOP.</p> <code>start</code> <code>datetime</code> <p>Start time of the workout.</p> <code>end</code> <code>datetime</code> <p>End time of the workout.</p> <code>timezone_offset</code> <code>str</code> <p>User's timezone offset when the workout was recorded (format: \u00b1hh:mm or Z).</p> <code>sport_name</code> <code>str</code> <p>Name of the WHOOP Sport performed during the workout.</p> <code>sport_id</code> <code>Optional[int]</code> <p>ID of the WHOOP Sport performed (deprecated after 09/01/2025).</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this workout.</p> <code>score</code> <code>Optional[WorkoutScore]</code> <p>Measurements and evaluation of the workout. Only present if score_state is SCORED.</p>"},{"location":"reference/models/#workoutscore","title":"WorkoutScore","text":""},{"location":"reference/models/#whoop_client.models.workout.WorkoutScore","title":"WorkoutScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of a workout activity.</p> <p>Attributes:</p> Name Type Description <code>strain</code> <code>float</code> <p>Cardiovascular load (0-21 scale) based on heart rate during the workout.</p> <code>average_heart_rate</code> <code>int</code> <p>Average heart rate in beats per minute during the workout.</p> <code>max_heart_rate</code> <code>int</code> <p>Maximum heart rate in beats per minute during the workout.</p> <code>kilojoule</code> <code>float</code> <p>Energy expended during the workout in kilojoules.</p> <code>percent_recorded</code> <code>float</code> <p>Percentage (0-100%) of heart rate data received during the workout.</p> <code>distance_meter</code> <code>Optional[float]</code> <p>Distance traveled in meters (optional, if distance data available).</p> <code>altitude_gain_meter</code> <code>Optional[float]</code> <p>Total altitude climbed in meters (optional, if altitude data available).</p> <code>altitude_change_meter</code> <code>Optional[float]</code> <p>Net altitude change in meters (optional, if altitude data available).</p> <code>zone_durations</code> <code>ZoneDurations</code> <p>Time spent in each heart rate zone.</p>"},{"location":"reference/models/#zonedurations","title":"ZoneDurations","text":""},{"location":"reference/models/#whoop_client.models.workout.ZoneDurations","title":"ZoneDurations","text":"<p>               Bases: <code>BaseModel</code></p> <p>Breakdown of time spent in each heart rate zone during a workout.</p> <p>Attributes:</p> Name Type Description <code>zone_zero_milli</code> <code>int</code> <p>Time in Zone 0 (very light activity) in milliseconds.</p> <code>zone_one_milli</code> <code>int</code> <p>Time in Zone 1 (light activity) in milliseconds.</p> <code>zone_two_milli</code> <code>int</code> <p>Time in Zone 2 (moderate activity) in milliseconds.</p> <code>zone_three_milli</code> <code>int</code> <p>Time in Zone 3 (hard activity) in milliseconds.</p> <code>zone_four_milli</code> <code>int</code> <p>Time in Zone 4 (very hard activity) in milliseconds.</p> <code>zone_five_milli</code> <code>int</code> <p>Time in Zone 5 (maximum effort) in milliseconds.</p>"},{"location":"reference/models/#workoutcollection","title":"WorkoutCollection","text":""},{"location":"reference/models/#whoop_client.models.workout.WorkoutCollection","title":"WorkoutCollection","text":"<p>               Bases: <code>PaginatedResponse</code></p> <p>Paginated response containing workout activities.</p> <p>Attributes:</p> Name Type Description <code>records</code> <code>List[WorkoutV2]</code> <p>List of workout activities in this page.</p> <code>next_token</code> <code>Optional[str]</code> <p>Token for accessing the next page of records.</p>"},{"location":"reference/sleep/","title":"Sleep Methods","text":"<p>The sleep methods provide access to sleep activity data and sleep performance metrics.</p>"},{"location":"reference/sleep/#overview","title":"Overview","text":"<p>WHOOP tracks sleep activities including regular sleep and naps. Each sleep record contains detailed information about sleep stages, efficiency, and recovery metrics.</p>"},{"location":"reference/sleep/#methods","title":"Methods","text":""},{"location":"reference/sleep/#whoop_client.client.WhoopClient.get_sleep_by_id","title":"get_sleep_by_id  <code>async</code>","text":"<pre><code>get_sleep_by_id(sleep_id: Union[str, UUID]) -&gt; Sleep\n</code></pre> <p>Get a specific sleep by ID.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_id</code> <code>Union[str, UUID]</code> <p>UUID of the sleep to retrieve.</p> required <p>Returns:</p> Type Description <code>Sleep</code> <p>The requested sleep activity.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/sleep/#whoop_client.client.WhoopClient.get_sleep_collection","title":"get_sleep_collection  <code>async</code>","text":"<pre><code>get_sleep_collection(\n    limit: int = 10,\n    start: Optional[datetime] = None,\n    end: Optional[datetime] = None,\n    next_token: Optional[str] = None,\n) -&gt; PaginatedSleepResponse\n</code></pre> <p>Get all sleeps for a user, paginated.</p> <p>Results are sorted by start time in descending order.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Maximum number of sleeps to return (max 25, default 10).</p> <code>10</code> <code>start</code> <code>Optional[datetime]</code> <p>Return sleeps that occurred after or during this time.</p> <code>None</code> <code>end</code> <code>Optional[datetime]</code> <p>Return sleeps that ended before this time (default: now).</p> <code>None</code> <code>next_token</code> <code>Optional[str]</code> <p>Token from previous response to get next page.</p> <code>None</code> <p>Returns:</p> Type Description <code>PaginatedSleepResponse</code> <p>Paginated response containing sleep activities.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/sleep/#whoop_client.client.WhoopClient.iterate_sleeps","title":"iterate_sleeps  <code>async</code>","text":"<pre><code>iterate_sleeps(\n    start: Optional[datetime] = None,\n    end: Optional[datetime] = None,\n    page_size: int = 25,\n) -&gt; AsyncIterator[Sleep]\n</code></pre> <p>Iterate through all sleeps with automatic pagination.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Optional[datetime]</code> <p>Return sleeps that occurred after or during this time.</p> <code>None</code> <code>end</code> <code>Optional[datetime]</code> <p>Return sleeps that ended before this time.</p> <code>None</code> <code>page_size</code> <code>int</code> <p>Number of items per page (max 25).</p> <code>25</code> <p>Yields:</p> Type Description <code>AsyncIterator[Sleep]</code> <p>Individual sleep objects.</p>"},{"location":"reference/sleep/#models","title":"Models","text":""},{"location":"reference/sleep/#whoop_client.models.sleep.Sleep","title":"Sleep","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a sleep activity in WHOOP.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Unique identifier for the sleep activity.</p> <code>v1_id</code> <code>Optional[int]</code> <p>Previous generation identifier (deprecated after 09/01/2025).</p> <code>user_id</code> <code>int</code> <p>The WHOOP User who performed the sleep activity.</p> <code>created_at</code> <code>datetime</code> <p>When the sleep activity was recorded in WHOOP.</p> <code>updated_at</code> <code>datetime</code> <p>When the sleep activity was last updated in WHOOP.</p> <code>start</code> <code>datetime</code> <p>Start time of the sleep.</p> <code>end</code> <code>datetime</code> <p>End time of the sleep.</p> <code>timezone_offset</code> <code>str</code> <p>User's timezone offset when the sleep was recorded (format: \u00b1hh:mm or Z).</p> <code>nap</code> <code>bool</code> <p>Whether this sleep activity was a nap.</p> <code>score_state</code> <code>ScoreState</code> <p>Current state of score calculation for this sleep.</p> <code>score</code> <code>Optional[SleepScore]</code> <p>Measurements and evaluation of the sleep. Only present if score_state is SCORED.</p>"},{"location":"reference/sleep/#whoop_client.models.sleep.SleepScore","title":"SleepScore","text":"<p>               Bases: <code>BaseModel</code></p> <p>WHOOP's measurements and evaluation of a sleep activity.</p> <p>Attributes:</p> Name Type Description <code>stage_summary</code> <code>SleepStageSummary</code> <p>Summary of time spent in each sleep stage.</p> <code>sleep_needed</code> <code>SleepNeeded</code> <p>Breakdown of sleep need calculation.</p> <code>respiratory_rate</code> <code>Optional[float]</code> <p>Respiratory rate during sleep in breaths per minute.</p> <code>sleep_performance_percentage</code> <code>Optional[float]</code> <p>Percentage of sleep achieved vs sleep needed (0-100%).</p> <code>sleep_consistency_percentage</code> <code>Optional[float]</code> <p>Sleep/wake time consistency vs previous day (0-100%).</p> <code>sleep_efficiency_percentage</code> <code>Optional[float]</code> <p>Percentage of time in bed actually sleeping (0-100%).</p>"},{"location":"reference/sleep/#whoop_client.models.sleep.SleepStageSummary","title":"SleepStageSummary","text":"<p>               Bases: <code>BaseModel</code></p> <p>Summary of sleep stages during a sleep activity.</p> <p>Attributes:</p> Name Type Description <code>total_in_bed_time_milli</code> <code>int</code> <p>Total time spent in bed in milliseconds.</p> <code>total_awake_time_milli</code> <code>int</code> <p>Total time spent awake in milliseconds.</p> <code>total_no_data_time_milli</code> <code>int</code> <p>Total time with no data received in milliseconds.</p> <code>total_light_sleep_time_milli</code> <code>int</code> <p>Total time in light sleep in milliseconds.</p> <code>total_slow_wave_sleep_time_milli</code> <code>int</code> <p>Total time in Slow Wave Sleep (SWS) in milliseconds.</p> <code>total_rem_sleep_time_milli</code> <code>int</code> <p>Total time in Rapid Eye Movement (REM) sleep in milliseconds.</p> <code>sleep_cycle_count</code> <code>int</code> <p>Number of sleep cycles during the sleep.</p> <code>disturbance_count</code> <code>int</code> <p>Number of times the user was disturbed during sleep.</p>"},{"location":"reference/sleep/#whoop_client.models.sleep.SleepNeeded","title":"SleepNeeded","text":"<p>               Bases: <code>BaseModel</code></p> <p>Breakdown of sleep need calculation.</p> <p>Attributes:</p> Name Type Description <code>baseline_milli</code> <code>int</code> <p>Sleep needed based on historical trends in milliseconds.</p> <code>need_from_sleep_debt_milli</code> <code>int</code> <p>Additional sleep needed due to sleep debt in milliseconds.</p> <code>need_from_recent_strain_milli</code> <code>int</code> <p>Additional sleep needed due to recent strain in milliseconds.</p> <code>need_from_recent_nap_milli</code> <code>int</code> <p>Reduction in sleep need from recent naps (negative or zero) in milliseconds.</p>"},{"location":"reference/sleep/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/sleep/#getting-a-specific-sleep","title":"Getting a Specific Sleep","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_sleep_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get a specific sleep by ID\n    sleep_id = \"ecfc6a15-4661-442f-a9a4-f160dd7afae8\"\n    sleep = await client.get_sleep_by_id(sleep_id)\n\n    print(f\"Sleep ID: {sleep.id}\")\n    print(f\"Start: {sleep.start}\")\n    print(f\"End: {sleep.end}\")\n    print(f\"Is nap: {sleep.nap}\")\n\n    if sleep.score:\n        print(f\"Sleep efficiency: {sleep.score.sleep_efficiency_percentage}%\")\n        print(f\"Sleep performance: {sleep.score.sleep_performance_percentage}%\")\n        print(f\"Sleep cycles: {sleep.score.stage_summary.sleep_cycle_count}\")\n\nasyncio.run(get_sleep_example())\n</code></pre>"},{"location":"reference/sleep/#analyzing-sleep-stages","title":"Analyzing Sleep Stages","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def analyze_sleep_stages():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    response = await client.get_sleep_collection(limit=10)\n\n    for sleep in response.records:\n        if sleep.score and not sleep.nap:  # Only analyze actual sleep, not naps\n            stages = sleep.score.stage_summary\n\n            # Convert milliseconds to hours\n            total_sleep_hours = (stages.total_light_sleep_time_milli + \n                               stages.total_slow_wave_sleep_time_milli + \n                               stages.total_rem_sleep_time_milli) / (1000 * 60 * 60)\n\n            light_hours = stages.total_light_sleep_time_milli / (1000 * 60 * 60)\n            deep_hours = stages.total_slow_wave_sleep_time_milli / (1000 * 60 * 60)\n            rem_hours = stages.total_rem_sleep_time_milli / (1000 * 60 * 60)\n\n            print(f\"Sleep on {sleep.start.date()}:\")\n            print(f\"  Total sleep: {total_sleep_hours:.1f} hours\")\n            print(f\"  Light sleep: {light_hours:.1f}h ({light_hours/total_sleep_hours*100:.1f}%)\")\n            print(f\"  Deep sleep: {deep_hours:.1f}h ({deep_hours/total_sleep_hours*100:.1f}%)\")\n            print(f\"  REM sleep: {rem_hours:.1f}h ({rem_hours/total_sleep_hours*100:.1f}%)\")\n            print(f\"  Disturbances: {stages.disturbance_count}\")\n            print()\n\nasyncio.run(analyze_sleep_stages())\n</code></pre>"},{"location":"reference/sleep/#sleep-trends-analysis","title":"Sleep Trends Analysis","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\nfrom whoop_client import WhoopClient\n\nasync def sleep_trends_analysis():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get sleep data for the last 30 days\n    start_date = datetime.now() - timedelta(days=30)\n\n    sleep_data = []\n    async for sleep in client.iterate_sleeps(start=start_date):\n        if sleep.score and not sleep.nap:\n            sleep_data.append(sleep)\n\n    # Calculate averages\n    if sleep_data:\n        avg_efficiency = sum(s.score.sleep_efficiency_percentage for s in sleep_data) / len(sleep_data)\n        avg_performance = sum(s.score.sleep_performance_percentage for s in sleep_data if s.score.sleep_performance_percentage) / len([s for s in sleep_data if s.score.sleep_performance_percentage])\n        avg_cycles = sum(s.score.stage_summary.sleep_cycle_count for s in sleep_data) / len(sleep_data)\n\n        print(f\"Sleep trends over last 30 days ({len(sleep_data)} nights):\")\n        print(f\"Average sleep efficiency: {avg_efficiency:.1f}%\")\n        print(f\"Average sleep performance: {avg_performance:.1f}%\")\n        print(f\"Average sleep cycles: {avg_cycles:.1f}\")\n\nasyncio.run(sleep_trends_analysis())\n</code></pre>"},{"location":"reference/sleep/#required-scopes","title":"Required Scopes","text":"<ul> <li><code>read:sleep</code> - Required for all sleep methods</li> </ul>"},{"location":"reference/sleep/#understanding-sleep-metrics","title":"Understanding Sleep Metrics","text":""},{"location":"reference/sleep/#sleep-efficiency","title":"Sleep Efficiency","text":"<p>The percentage of time spent in bed actually sleeping. Higher values indicate better sleep quality.</p>"},{"location":"reference/sleep/#sleep-performance","title":"Sleep Performance","text":"<p>The percentage of sleep need that was fulfilled. Values above 85% are generally considered good.</p>"},{"location":"reference/sleep/#sleep-consistency","title":"Sleep Consistency","text":"<p>How similar sleep and wake times are compared to previous days. Consistent sleep schedules improve sleep quality.</p>"},{"location":"reference/sleep/#sleep-stages","title":"Sleep Stages","text":"<ul> <li>Light Sleep: Transition between awake and deep sleep</li> <li>Deep Sleep (SWS): Slow Wave Sleep, crucial for physical recovery</li> <li>REM Sleep: Rapid Eye Movement sleep, important for cognitive function</li> </ul>"},{"location":"reference/sleep/#error-handling","title":"Error Handling","text":"<pre><code>import asyncio\nimport httpx\nfrom whoop_client import WhoopClient\n\nasync def error_handling_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    try:\n        sleep = await client.get_sleep_by_id(\"invalid-uuid\")\n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 404:\n            print(\"Sleep not found\")\n        elif e.response.status_code == 401:\n            print(\"Authentication failed\")\n        elif e.response.status_code == 429:\n            print(\"Rate limit exceeded\")\n        else:\n            print(f\"HTTP error: {e.response.status_code}\")\n    except ValueError as e:\n        print(f\"Client error: {e}\")\n\nasyncio.run(error_handling_example())\n</code></pre>"},{"location":"reference/user/","title":"User Methods","text":"<p>The user methods provide access to user profile information and body measurements.</p>"},{"location":"reference/user/#overview","title":"Overview","text":"<p>These methods allow you to retrieve basic profile information and physical measurements for the authenticated user.</p>"},{"location":"reference/user/#methods","title":"Methods","text":""},{"location":"reference/user/#whoop_client.client.WhoopClient.get_profile_basic","title":"get_profile_basic  <code>async</code>","text":"<pre><code>get_profile_basic() -&gt; UserBasicProfile\n</code></pre> <p>Get basic profile information for the authenticated user.</p> <p>Returns:</p> Type Description <code>UserBasicProfile</code> <p>User's basic profile including name and email.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/user/#whoop_client.client.WhoopClient.get_body_measurement","title":"get_body_measurement  <code>async</code>","text":"<pre><code>get_body_measurement() -&gt; UserBodyMeasurement\n</code></pre> <p>Get body measurements for the authenticated user.</p> <p>Returns:</p> Type Description <code>UserBodyMeasurement</code> <p>User's body measurements including height, weight, and max heart rate.</p> <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>If the request fails.</p>"},{"location":"reference/user/#models","title":"Models","text":""},{"location":"reference/user/#whoop_client.models.user.UserBasicProfile","title":"UserBasicProfile","text":"<p>               Bases: <code>BaseModel</code></p> <p>Basic profile information for a WHOOP user.</p> <p>Attributes:</p> Name Type Description <code>user_id</code> <code>int</code> <p>The WHOOP User ID.</p> <code>email</code> <code>EmailStr</code> <p>User's email address.</p> <code>first_name</code> <code>str</code> <p>User's first name.</p> <code>last_name</code> <code>str</code> <p>User's last name.</p>"},{"location":"reference/user/#whoop_client.models.user.UserBodyMeasurement","title":"UserBodyMeasurement","text":"<p>               Bases: <code>BaseModel</code></p> <p>Body measurements for a WHOOP user.</p> <p>Attributes:</p> Name Type Description <code>height_meter</code> <code>float</code> <p>User's height in meters.</p> <code>weight_kilogram</code> <code>float</code> <p>User's weight in kilograms.</p> <code>max_heart_rate</code> <code>int</code> <p>WHOOP-calculated maximum heart rate for the user.</p>"},{"location":"reference/user/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/user/#getting-basic-profile","title":"Getting Basic Profile","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_profile_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get basic user profile\n    profile = await client.get_profile_basic()\n\n    print(f\"User ID: {profile.user_id}\")\n    print(f\"Email: {profile.email}\")\n    print(f\"Name: {profile.first_name} {profile.last_name}\")\n\nasyncio.run(get_profile_example())\n</code></pre>"},{"location":"reference/user/#getting-body-measurements","title":"Getting Body Measurements","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_measurements_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get body measurements\n    measurements = await client.get_body_measurement()\n\n    print(f\"Height: {measurements.height_meter:.2f} meters\")\n    print(f\"Weight: {measurements.weight_kilogram:.1f} kg\")\n    print(f\"Max HR: {measurements.max_heart_rate} bpm\")\n\n    # Convert to imperial units\n    height_feet = measurements.height_meter * 3.28084\n    weight_pounds = measurements.weight_kilogram * 2.20462\n\n    print(f\"Height: {height_feet:.1f} feet\")\n    print(f\"Weight: {weight_pounds:.1f} pounds\")\n\nasyncio.run(get_measurements_example())\n</code></pre>"},{"location":"reference/user/#complete-user-information","title":"Complete User Information","text":"<pre><code>import asyncio\nfrom whoop_client import WhoopClient\n\nasync def get_user_info_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    # Get both profile and measurements\n    profile, measurements = await asyncio.gather(\n        client.get_profile_basic(),\n        client.get_body_measurement()\n    )\n\n    print(f\"User: {profile.first_name} {profile.last_name}\")\n    print(f\"Email: {profile.email}\")\n    print(f\"User ID: {profile.user_id}\")\n    print(f\"Height: {measurements.height_meter:.2f}m\")\n    print(f\"Weight: {measurements.weight_kilogram:.1f}kg\")\n    print(f\"Max Heart Rate: {measurements.max_heart_rate} bpm\")\n\nasyncio.run(get_user_info_example())\n</code></pre>"},{"location":"reference/user/#required-scopes","title":"Required Scopes","text":"<ul> <li><code>read:profile</code> - Required for <code>get_profile_basic()</code></li> <li><code>read:body_measurement</code> - Required for <code>get_body_measurement()</code></li> </ul>"},{"location":"reference/user/#error-handling","title":"Error Handling","text":"<pre><code>import asyncio\nimport httpx\nfrom whoop_client import WhoopClient\n\nasync def error_handling_example():\n    client = WhoopClient(\n        client_id=\"your_client_id\",\n        client_secret=\"your_client_secret\",\n        redirect_uri=\"your_redirect_uri\",\n        access_token=\"your_access_token\",\n        refresh_token=\"your_refresh_token\"\n    )\n\n    try:\n        profile = await client.get_profile_basic()\n        measurements = await client.get_body_measurement()\n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 401:\n            print(\"Authentication failed - check your tokens\")\n        elif e.response.status_code == 403:\n            print(\"Insufficient permissions - check your scopes\")\n        elif e.response.status_code == 404:\n            print(\"User data not found\")\n        else:\n            print(f\"HTTP error: {e.response.status_code}\")\n    except ValueError as e:\n        print(f\"Client error: {e}\")\n\nasyncio.run(error_handling_example())\n</code></pre>"}]}